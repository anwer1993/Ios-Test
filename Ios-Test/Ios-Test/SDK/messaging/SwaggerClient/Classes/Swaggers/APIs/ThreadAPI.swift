//
// ThreadAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ThreadAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func threadsCountGet(completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        threadsCountGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /threads/count
     - 

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "count" : 0
}}]

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func threadsCountGetWithRequestBuilder() -> RequestBuilder<InlineResponse200> {
        let path = "/threads/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter limit: (query) Maximum number of results possible (optional)
     - parameter sort: (query) Sort according to a specific field. (optional)
     - parameter start: (query) Skip a specific number of entries (especially useful for pagination) (optional)
     - parameter : (query) Get entries that matches exactly your input (optional)
     - parameter ne: (query) Get records that are not equals to something (optional)
     - parameter lt: (query) Get record that are lower than a value (optional)
     - parameter lte: (query) Get records that are lower than or equal to a value (optional)
     - parameter gt: (query) Get records that are greater than a value (optional)
     - parameter gte: (query) Get records that are greater than  or equal a value (optional)
     - parameter contains: (query) Get records that contains a value (optional)
     - parameter containss: (query) Get records that contains (case sensitive) a value (optional)
     - parameter _in: (query) Get records that matches any value in the array of values (optional)
     - parameter nin: (query) Get records that doesn&#x27;t match any value in the array of values (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func threadsGet(limit: Int? = nil, sort: String? = nil, start: Int? = nil, : String? = nil, ne: String? = nil, lt: String? = nil, lte: String? = nil, gt: String? = nil, gte: String? = nil, contains: String? = nil, containss: String? = nil, _in: [String]? = nil, nin: [String]? = nil, completion: @escaping ((_ data: [Thread]?,_ error: Error?) -> Void)) {
        threadsGetWithRequestBuilder(limit: limit, sort: sort, start: start, : , ne: ne, lt: lt, lte: lte, gt: gt, gte: gte, contains: contains, containss: containss, _in: _in, nin: nin).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /threads
     - 

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example=[ {
  "messages" : [ {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  }, {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "title" : "title",
  "participents" : [ {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  }, {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  } ]
}, {
  "messages" : [ {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  }, {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "title" : "title",
  "participents" : [ {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  }, {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  } ]
} ]}]
     - parameter limit: (query) Maximum number of results possible (optional)
     - parameter sort: (query) Sort according to a specific field. (optional)
     - parameter start: (query) Skip a specific number of entries (especially useful for pagination) (optional)
     - parameter : (query) Get entries that matches exactly your input (optional)
     - parameter ne: (query) Get records that are not equals to something (optional)
     - parameter lt: (query) Get record that are lower than a value (optional)
     - parameter lte: (query) Get records that are lower than or equal to a value (optional)
     - parameter gt: (query) Get records that are greater than a value (optional)
     - parameter gte: (query) Get records that are greater than  or equal a value (optional)
     - parameter contains: (query) Get records that contains a value (optional)
     - parameter containss: (query) Get records that contains (case sensitive) a value (optional)
     - parameter _in: (query) Get records that matches any value in the array of values (optional)
     - parameter nin: (query) Get records that doesn&#x27;t match any value in the array of values (optional)

     - returns: RequestBuilder<[Thread]> 
     */
    open class func threadsGetWithRequestBuilder(limit: Int? = nil, sort: String? = nil, start: Int? = nil, : String? = nil, ne: String? = nil, lt: String? = nil, lte: String? = nil, gt: String? = nil, gte: String? = nil, contains: String? = nil, containss: String? = nil, _in: [String]? = nil, nin: [String]? = nil) -> RequestBuilder<[Thread]> {
        let path = "/threads"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "_limit": limit?.encodeToJSON(), 
                        "_sort": sort, 
                        "_start": start?.encodeToJSON(), 
                        "&#x3D;": , 
                        "_ne": ne, 
                        "_lt": lt, 
                        "_lte": lte, 
                        "_gt": gt, 
                        "_gte": gte, 
                        "_contains": contains, 
                        "_containss": containss, 
                        "_in": _in, 
                        "_nin": nin
        ])


        let requestBuilder: RequestBuilder<[Thread]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func threadsIdDelete(_id: String, completion: @escaping ((_ data: Int64?,_ error: Error?) -> Void)) {
        threadsIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - DELETE /threads/{id}

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example=0}]
     - parameter _id: (path)  

     - returns: RequestBuilder<Int64> 
     */
    open class func threadsIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<Int64> {
        var path = "/threads/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Int64>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func threadsIdGet(_id: String, completion: @escaping ((_ data: Thread?,_ error: Error?) -> Void)) {
        threadsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /threads/{id}
     - 

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "messages" : [ {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  }, {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "title" : "title",
  "participents" : [ {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  }, {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  } ]
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<Thread> 
     */
    open class func threadsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<Thread> {
        var path = "/threads/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Thread>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func threadsIdPut(body: NewThread, _id: String, completion: @escaping ((_ data: Thread?,_ error: Error?) -> Void)) {
        threadsIdPutWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /threads/{id}

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "messages" : [ {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  }, {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "title" : "title",
  "participents" : [ {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  }, {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  } ]
}}]
     - parameter body: (body)  
     - parameter _id: (path)  

     - returns: RequestBuilder<Thread> 
     */
    open class func threadsIdPutWithRequestBuilder(body: NewThread, _id: String) -> RequestBuilder<Thread> {
        var path = "/threads/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Thread>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func threadsPost(body: NewThread, completion: @escaping ((_ data: Thread?,_ error: Error?) -> Void)) {
        threadsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /threads

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "messages" : [ {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  }, {
    "read" : true,
    "sender" : "sender",
    "updated_by" : "updated_by",
    "delivered" : true,
    "id" : "id",
    "text" : "text",
    "thread" : "thread",
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "title" : "title",
  "participents" : [ {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  }, {
    "lastName" : "lastName",
    "role" : "role",
    "threads" : [ "threads", "threads" ],
    "avatar" : "avatar",
    "confirmed" : true,
    "created_by" : "created_by",
    "resetPasswordToken" : "resetPasswordToken",
    "firstName" : "firstName",
    "password" : "password",
    "blocked" : true,
    "provider" : "provider",
    "updated_by" : "updated_by",
    "confirmationToken" : "confirmationToken",
    "id" : "id",
    "email" : "email",
    "username" : "username"
  } ]
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<Thread> 
     */
    open class func threadsPostWithRequestBuilder(body: NewThread) -> RequestBuilder<Thread> {
        let path = "/threads"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Thread>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
