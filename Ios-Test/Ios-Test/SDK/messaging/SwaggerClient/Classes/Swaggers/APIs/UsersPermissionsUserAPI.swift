//
// UsersPermissionsUserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UsersPermissionsUserAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authEmailConfirmationGet(completion: @escaping ((_ data: AuthResetpasswordBody?,_ error: Error?) -> Void)) {
        authEmailConfirmationGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /auth/email-confirmation

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "foo" : "foo"
}}]

     - returns: RequestBuilder<AuthResetpasswordBody> 
     */
    open class func authEmailConfirmationGetWithRequestBuilder() -> RequestBuilder<AuthResetpasswordBody> {
        let path = "/auth/email-confirmation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthResetpasswordBody>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authForgotPasswordPost(body: AuthForgotpasswordBody, completion: @escaping ((_ data: AuthForgotpasswordBody?,_ error: Error?) -> Void)) {
        authForgotPasswordPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /auth/forgot-password

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "foo" : "foo"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<AuthForgotpasswordBody> 
     */
    open class func authForgotPasswordPostWithRequestBuilder(body: AuthForgotpasswordBody) -> RequestBuilder<AuthForgotpasswordBody> {
        let path = "/auth/forgot-password"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthForgotpasswordBody>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authLocalPost(body: AuthLocalBody, completion: @escaping ((_ data: AuthLocalBody?,_ error: Error?) -> Void)) {
        authLocalPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /auth/local

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "foo" : "foo"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<AuthLocalBody> 
     */
    open class func authLocalPostWithRequestBuilder(body: AuthLocalBody) -> RequestBuilder<AuthLocalBody> {
        let path = "/auth/local"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthLocalBody>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authLocalRegisterPost(body: NewUsersPermissionsUser, completion: @escaping ((_ data: UsersPermissionsUser?,_ error: Error?) -> Void)) {
        authLocalRegisterPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /auth/local/register

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "role" : {
    "permissions" : [ "permissions", "permissions" ],
    "name" : "name",
    "updated_by" : "updated_by",
    "description" : "description",
    "id" : "id",
    "type" : "type",
    "created_by" : "created_by",
    "users" : [ "users", "users" ]
  },
  "blocked" : false,
  "provider" : "provider",
  "threads" : [ {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  }, {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "avatar" : "avatar",
  "confirmed" : false,
  "email" : "email",
  "username" : "username"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<UsersPermissionsUser> 
     */
    open class func authLocalRegisterPostWithRequestBuilder(body: NewUsersPermissionsUser) -> RequestBuilder<UsersPermissionsUser> {
        let path = "/auth/local/register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UsersPermissionsUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter provider: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authProviderCallbackGet(provider: String, completion: @escaping ((_ data: AuthLocalBody?,_ error: Error?) -> Void)) {
        authProviderCallbackGetWithRequestBuilder(provider: provider).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /auth/{provider}/callback

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "foo" : "foo"
}}]
     - parameter provider: (path)  

     - returns: RequestBuilder<AuthLocalBody> 
     */
    open class func authProviderCallbackGetWithRequestBuilder(provider: String) -> RequestBuilder<AuthLocalBody> {
        var path = "/auth/{provider}/callback"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthLocalBody>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authResetPasswordPost(body: AuthResetpasswordBody, completion: @escaping ((_ data: AuthResetpasswordBody?,_ error: Error?) -> Void)) {
        authResetPasswordPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /auth/reset-password

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "foo" : "foo"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<AuthResetpasswordBody> 
     */
    open class func authResetPasswordPostWithRequestBuilder(body: AuthResetpasswordBody) -> RequestBuilder<AuthResetpasswordBody> {
        let path = "/auth/reset-password"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthResetpasswordBody>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authSendEmailConfirmationPost(body: AuthSendemailconfirmationBody, completion: @escaping ((_ data: AuthSendemailconfirmationBody?,_ error: Error?) -> Void)) {
        authSendEmailConfirmationPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /auth/send-email-confirmation

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "foo" : "foo"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<AuthSendemailconfirmationBody> 
     */
    open class func authSendEmailConfirmationPostWithRequestBuilder(body: AuthSendemailconfirmationBody) -> RequestBuilder<AuthSendemailconfirmationBody> {
        let path = "/auth/send-email-confirmation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthSendemailconfirmationBody>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connectGet(completion: @escaping ((_ data: UploadBody?,_ error: Error?) -> Void)) {
        connectGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /connect/

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "foo" : "foo"
}}]

     - returns: RequestBuilder<UploadBody> 
     */
    open class func connectGetWithRequestBuilder() -> RequestBuilder<UploadBody> {
        let path = "/connect/*"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UploadBody>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter limit: (query) Maximum number of results possible (optional)
     - parameter sort: (query) Sort according to a specific field. (optional)
     - parameter start: (query) Skip a specific number of entries (especially useful for pagination) (optional)
     - parameter : (query) Get entries that matches exactly your input (optional)
     - parameter ne: (query) Get records that are not equals to something (optional)
     - parameter lt: (query) Get record that are lower than a value (optional)
     - parameter lte: (query) Get records that are lower than or equal to a value (optional)
     - parameter gt: (query) Get records that are greater than a value (optional)
     - parameter gte: (query) Get records that are greater than  or equal a value (optional)
     - parameter contains: (query) Get records that contains a value (optional)
     - parameter containss: (query) Get records that contains (case sensitive) a value (optional)
     - parameter _in: (query) Get records that matches any value in the array of values (optional)
     - parameter nin: (query) Get records that doesn&#x27;t match any value in the array of values (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersGet(limit: Int? = nil, sort: String? = nil, start: Int? = nil, ne: String? = nil, lt: String? = nil, lte: String? = nil, gt: String? = nil, gte: String? = nil, contains: String? = nil, containss: String? = nil, _in: [String]? = nil, nin: [String]? = nil, completion: @escaping ((_ data: [UsersPermissionsUser]?,_ error: Error?) -> Void)) {
        usersGetWithRequestBuilder(limit: limit, sort: sort, start: start, ne: ne, lt: lt, lte: lte, gt: gt, gte: gte, contains: contains, containss: containss, _in: _in, nin: nin).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example=[ {
  "firstName" : "firstName",
  "lastName" : "lastName",
  "role" : {
    "permissions" : [ "permissions", "permissions" ],
    "name" : "name",
    "updated_by" : "updated_by",
    "description" : "description",
    "id" : "id",
    "type" : "type",
    "created_by" : "created_by",
    "users" : [ "users", "users" ]
  },
  "blocked" : false,
  "provider" : "provider",
  "threads" : [ {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  }, {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "avatar" : "avatar",
  "confirmed" : false,
  "email" : "email",
  "username" : "username"
}, {
  "firstName" : "firstName",
  "lastName" : "lastName",
  "role" : {
    "permissions" : [ "permissions", "permissions" ],
    "name" : "name",
    "updated_by" : "updated_by",
    "description" : "description",
    "id" : "id",
    "type" : "type",
    "created_by" : "created_by",
    "users" : [ "users", "users" ]
  },
  "blocked" : false,
  "provider" : "provider",
  "threads" : [ {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  }, {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "avatar" : "avatar",
  "confirmed" : false,
  "email" : "email",
  "username" : "username"
} ]}]
     - parameter limit: (query) Maximum number of results possible (optional)
     - parameter sort: (query) Sort according to a specific field. (optional)
     - parameter start: (query) Skip a specific number of entries (especially useful for pagination) (optional)
     - parameter : (query) Get entries that matches exactly your input (optional)
     - parameter ne: (query) Get records that are not equals to something (optional)
     - parameter lt: (query) Get record that are lower than a value (optional)
     - parameter lte: (query) Get records that are lower than or equal to a value (optional)
     - parameter gt: (query) Get records that are greater than a value (optional)
     - parameter gte: (query) Get records that are greater than  or equal a value (optional)
     - parameter contains: (query) Get records that contains a value (optional)
     - parameter containss: (query) Get records that contains (case sensitive) a value (optional)
     - parameter _in: (query) Get records that matches any value in the array of values (optional)
     - parameter nin: (query) Get records that doesn&#x27;t match any value in the array of values (optional)

     - returns: RequestBuilder<[UsersPermissionsUser]> 
     */
    open class func usersGetWithRequestBuilder(limit: Int? = nil, sort: String? = nil, start: Int? = nil, ne: String? = nil, lt: String? = nil, lte: String? = nil, gt: String? = nil, gte: String? = nil, contains: String? = nil, containss: String? = nil, _in: [String]? = nil, nin: [String]? = nil) -> RequestBuilder<[UsersPermissionsUser]> {
        let path = "/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "_limit": limit?.encodeToJSON(), 
                        "_sort": sort, 
                        "_start": start?.encodeToJSON(),
                        "_ne": ne, 
                        "_lt": lt, 
                        "_lte": lte, 
                        "_gt": gt, 
                        "_gte": gte, 
                        "_contains": contains, 
                        "_containss": containss, 
                        "_in": _in, 
                        "_nin": nin
        ])


        let requestBuilder: RequestBuilder<[UsersPermissionsUser]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersIdDelete(_id: String, completion: @escaping ((_ data: AuthSendemailconfirmationBody?,_ error: Error?) -> Void)) {
        usersIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - DELETE /users/{id}

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "foo" : "foo"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<AuthSendemailconfirmationBody> 
     */
    open class func usersIdDeleteWithRequestBuilder(_id: String) -> RequestBuilder<AuthSendemailconfirmationBody> {
        var path = "/users/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthSendemailconfirmationBody>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersIdGet(_id: String, completion: @escaping ((_ data: UsersPermissionsUser?,_ error: Error?) -> Void)) {
        usersIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/{id}

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "role" : {
    "permissions" : [ "permissions", "permissions" ],
    "name" : "name",
    "updated_by" : "updated_by",
    "description" : "description",
    "id" : "id",
    "type" : "type",
    "created_by" : "created_by",
    "users" : [ "users", "users" ]
  },
  "blocked" : false,
  "provider" : "provider",
  "threads" : [ {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  }, {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "avatar" : "avatar",
  "confirmed" : false,
  "email" : "email",
  "username" : "username"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<UsersPermissionsUser> 
     */
    open class func usersIdGetWithRequestBuilder(_id: String) -> RequestBuilder<UsersPermissionsUser> {
        var path = "/users/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UsersPermissionsUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersIdPut(body: NewUsersPermissionsUser, _id: String, completion: @escaping ((_ data: UsersPermissionsUser?,_ error: Error?) -> Void)) {
        usersIdPutWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /users/{id}

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "role" : {
    "permissions" : [ "permissions", "permissions" ],
    "name" : "name",
    "updated_by" : "updated_by",
    "description" : "description",
    "id" : "id",
    "type" : "type",
    "created_by" : "created_by",
    "users" : [ "users", "users" ]
  },
  "blocked" : false,
  "provider" : "provider",
  "threads" : [ {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  }, {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "avatar" : "avatar",
  "confirmed" : false,
  "email" : "email",
  "username" : "username"
}}]
     - parameter body: (body)  
     - parameter _id: (path)  

     - returns: RequestBuilder<UsersPermissionsUser> 
     */
    open class func usersIdPutWithRequestBuilder(body: NewUsersPermissionsUser, _id: String) -> RequestBuilder<UsersPermissionsUser> {
        var path = "/users/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UsersPermissionsUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersMeGet(completion: @escaping ((_ data: UsersPermissionsUser?,_ error: Error?) -> Void)) {
        usersMeGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/me

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "role" : {
    "permissions" : [ "permissions", "permissions" ],
    "name" : "name",
    "updated_by" : "updated_by",
    "description" : "description",
    "id" : "id",
    "type" : "type",
    "created_by" : "created_by",
    "users" : [ "users", "users" ]
  },
  "blocked" : false,
  "provider" : "provider",
  "threads" : [ {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  }, {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "avatar" : "avatar",
  "confirmed" : false,
  "email" : "email",
  "username" : "username"
}}]

     - returns: RequestBuilder<UsersPermissionsUser> 
     */
    open class func usersMeGetWithRequestBuilder() -> RequestBuilder<UsersPermissionsUser> {
        let path = "/users/me"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UsersPermissionsUser>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter limit: (query) Maximum number of results possible (optional)
     - parameter sort: (query) Sort according to a specific field. (optional)
     - parameter start: (query) Skip a specific number of entries (especially useful for pagination) (optional)
     - parameter : (query) Get entries that matches exactly your input (optional)
     - parameter ne: (query) Get records that are not equals to something (optional)
     - parameter lt: (query) Get record that are lower than a value (optional)
     - parameter lte: (query) Get records that are lower than or equal to a value (optional)
     - parameter gt: (query) Get records that are greater than a value (optional)
     - parameter gte: (query) Get records that are greater than  or equal a value (optional)
     - parameter contains: (query) Get records that contains a value (optional)
     - parameter containss: (query) Get records that contains (case sensitive) a value (optional)
     - parameter _in: (query) Get records that matches any value in the array of values (optional)
     - parameter nin: (query) Get records that doesn&#x27;t match any value in the array of values (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersPermissionsSearchIdGet(_id: String, limit: Int? = nil, sort: String? = nil, start: Int? = nil, ne: String? = nil, lt: String? = nil, lte: String? = nil, gt: String? = nil, gte: String? = nil, contains: String? = nil, containss: String? = nil, _in: [String]? = nil, nin: [String]? = nil, completion: @escaping ((_ data: [UsersPermissionsUser]?,_ error: Error?) -> Void)) {
        usersPermissionsSearchIdGetWithRequestBuilder(_id: _id, limit: limit, sort: sort, start: start, ne: ne, lt: lt, lte: lte, gt: gt, gte: gte, contains: contains, containss: containss, _in: _in, nin: nin).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users-permissions/search/{id}

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example=[ {
  "firstName" : "firstName",
  "lastName" : "lastName",
  "role" : {
    "permissions" : [ "permissions", "permissions" ],
    "name" : "name",
    "updated_by" : "updated_by",
    "description" : "description",
    "id" : "id",
    "type" : "type",
    "created_by" : "created_by",
    "users" : [ "users", "users" ]
  },
  "blocked" : false,
  "provider" : "provider",
  "threads" : [ {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  }, {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "avatar" : "avatar",
  "confirmed" : false,
  "email" : "email",
  "username" : "username"
}, {
  "firstName" : "firstName",
  "lastName" : "lastName",
  "role" : {
    "permissions" : [ "permissions", "permissions" ],
    "name" : "name",
    "updated_by" : "updated_by",
    "description" : "description",
    "id" : "id",
    "type" : "type",
    "created_by" : "created_by",
    "users" : [ "users", "users" ]
  },
  "blocked" : false,
  "provider" : "provider",
  "threads" : [ {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  }, {
    "updated_by" : "updated_by",
    "messages" : [ "messages", "messages" ],
    "id" : "id",
    "title" : "title",
    "participents" : [ "participents", "participents" ],
    "created_by" : "created_by"
  } ],
  "id" : "id",
  "avatar" : "avatar",
  "confirmed" : false,
  "email" : "email",
  "username" : "username"
} ]}]
     - parameter _id: (path)  
     - parameter limit: (query) Maximum number of results possible (optional)
     - parameter sort: (query) Sort according to a specific field. (optional)
     - parameter start: (query) Skip a specific number of entries (especially useful for pagination) (optional)
     - parameter : (query) Get entries that matches exactly your input (optional)
     - parameter ne: (query) Get records that are not equals to something (optional)
     - parameter lt: (query) Get record that are lower than a value (optional)
     - parameter lte: (query) Get records that are lower than or equal to a value (optional)
     - parameter gt: (query) Get records that are greater than a value (optional)
     - parameter gte: (query) Get records that are greater than  or equal a value (optional)
     - parameter contains: (query) Get records that contains a value (optional)
     - parameter containss: (query) Get records that contains (case sensitive) a value (optional)
     - parameter _in: (query) Get records that matches any value in the array of values (optional)
     - parameter nin: (query) Get records that doesn&#x27;t match any value in the array of values (optional)

     - returns: RequestBuilder<[UsersPermissionsUser]> 
     */
    open class func usersPermissionsSearchIdGetWithRequestBuilder(_id: String, limit: Int? = nil, sort: String? = nil, start: Int? = nil, ne: String? = nil, lt: String? = nil, lte: String? = nil, gt: String? = nil, gte: String? = nil, contains: String? = nil, containss: String? = nil, _in: [String]? = nil, nin: [String]? = nil) -> RequestBuilder<[UsersPermissionsUser]> {
        var path = "/users-permissions/search/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "_limit": limit?.encodeToJSON(), 
                        "_sort": sort, 
                        "_start": start?.encodeToJSON(),
                        "_ne": ne, 
                        "_lt": lt, 
                        "_lte": lte, 
                        "_gt": gt, 
                        "_gte": gte, 
                        "_contains": contains, 
                        "_containss": containss, 
                        "_in": _in, 
                        "_nin": nin
        ])


        let requestBuilder: RequestBuilder<[UsersPermissionsUser]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
